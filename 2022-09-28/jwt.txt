on auth setver side (if auth done):
signature = sha256 (payload, secret)

on resource server side, recieved signature and data:
check:
sha256 (payload, secret) == signature

Вместо HS256 использовать RS256. Это обеспечивает безопасность самого секретного ключа. Но с токенами все остается абсолютно как было. RS256 нам нужен, когда мы опасаемся передавать секретный ключ другим серверам, которые могут быть ненадежными. Мы им даем только инструмент проверки подлинности токена, что абсолютно бесполезно для злоумышленника.

Использовать короткоживущие токены. Но тогда пользователю придется перелогиниваться каждый раз, когда у него истечет срок жизни. Пользователю это рано или поздно надоест и он уйдет с нашего ресурса.
А что если всё-равно использовать короткоживущие токены, но дать ему еще один токен, цель которого лишь в том, чтобы получить новый короткоживущий токен без новой авторизации? Такой токен называется Refresh-токен и использовать его можно будет только один раз.

Ключевая идея разделения токенов состоит в том, что, с одной стороны, токены авторизации позволяют нам легко проверять пользователя без участия сервера авторизации, просто сравнением подписей.


C другой стороны у нас есть рефреш, который позволяют нам обновить токен доступа без ввода пароля от пользователя, но в этом случае нам все-таки потребуется выполнить дорогую операцию обращения к серверу авторизации.

Basically, refresh tokens are used to get new access token.

Refresh token stored in DB and associates with a user
Refresh token can be used only once
If hacker use refresh token to update access token (from auth server), for this moment access token will alose expire for user, so user go to login
and will update refresh token -> hacker refresh token became invalid, so it can't update active token any more
